#!/usr/bin/env python

from __future__ import absolute_import

"""

"""
import optparse
import sys
from multiprocessing import Process, Lock
from reposync.fs_monitor import *
from reposync.sync import *

def start_fs_monitor(monitor, mutex):
  try:
    monitor.start()
  except KeyboardInterrupt:
    monitor.stop()    
    sys.exit(0)

def start_git_updater(updater, mutex):
  try:
    updater.start()
  except KeyboardInterrupt:
    updater.stop()
    sys.exit(0)

if __name__ == '__main__':
  parser = optparse.OptionParser()
  parser.add_option('-r', '--repos', action="store", dest="repos", help="Repository roots to monitor")
  parser.add_option('-i', '--interval', action="store", dest="interval", default=5, type="int", help="Interval to check git")
  parser.add_option('-b', '--branch', action="store", dest="branch", default="integration", help="Which branch should be checked")
  parser.add_option('-c', '--callback', action="store", dest="callback", default=None, help="Script to be called upon changes")
  parser.add_option('-v', '--verbose', action="store_true", dest="verbose", default=False, help="More output")
  parser.add_option('-V', '--wicked-verbose', action='store_true', dest="wicked_verbose", default=False, help="Wicked more output")
  options, remainder = parser.parse_args()
  if options.repos is None:
    print("You must specify at least one repository to monitor")
    sys.exit(1)
  log_level = logging.WARNING
  if options.verbose and options.wicked_verbose:
    print('Dude, do you want more output or wicked more output (Please use either -v or -V, not both)')
    sys.exit(1)
  if options.verbose:
    log_level = logging.INFO
  if options.wicked_verbose:
    log_level = logging.DEBUG
  logging.basicConfig(level=log_level, format="%(levelname)s - %(asctime)s (%(name)s:%(funcName)s):  %(msg)s")
  repos = options.repos.split(',')
  mutex = Lock()
  monitor = FileSystemMonitor(mutex,options.branch, repos)
  monitor_process = Process(target=start_fs_monitor, args=(monitor,mutex))
  monitor_process.start()

  updater = GitUpdater(mutex,repos, options.interval, options.branch, options.callback)
  updater_process = Process(target=start_git_updater, args=(updater,mutex))
  updater_process.start()

  def handle_kill(signum, frame):
    monitor_process.join()
    updater_process.join()

  import signal
  signal.signal(signal.SIGINT, handle_kill)
